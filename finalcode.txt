/******************************written by ABHISHEK CHAUHAN a.k.a abhishekcg98****************************************/

#include <Keypad.h>
int dataPin1 = 3;
int latchPin1 = 4;
int clockPin1 = 5;

int dataPin2 = 6;
int latchPin2 = 7;
int clockPin2 = 8;

int dataPin3 = 9;
int latchPin3 = 10;
int clockPin3 = 11;

int dataPin4 = 12;
int latchPin4 = 13;
int clockPin4 = 14;

int dataPin5 = 15;
int latchPin5 = 16;
int clockPin5 = 17;

int dataPin6 = 18;
int latchPin6 = 19;
int clockPin6 = 20;

const byte ROWS = 4; //four ROWS-1
const byte COLS = 3; //three columns
char keys[ROWS][COLS] = {
        {'1','2','3'},
        {'4','5','6'},
        {'7','8','9'},
        {'*','0','#'}
        };
        
byte rowPins[ROWS] = {38, 36, 34, 32}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {30, 28, 26}; //connect to the column pinouts of the keypad
int lim[ROWS-1][COLS] = {
  {1,2,1},
  {2,3,2},
  {1,2,1}
  };
int val[ROWS-1][COLS],colr[ROWS-1][COLS];
  
int color=0;
char row,col;
Keypad keyp = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS ); 
bool firsttime= true;
int var=0;

void setup()
{
  pinMode(dataPin1, OUTPUT);
  pinMode(dataPin2, OUTPUT);
  pinMode(dataPin3, OUTPUT);
  pinMode(dataPin4, OUTPUT);
  pinMode(dataPin5, OUTPUT);
  pinMode(dataPin6, OUTPUT);
  
  pinMode(clockPin1, OUTPUT);
  pinMode(clockPin2, OUTPUT);
  pinMode(clockPin3, OUTPUT);
  pinMode(clockPin4, OUTPUT);
  pinMode(clockPin5, OUTPUT);
  pinMode(clockPin6, OUTPUT);
  
  pinMode(latchPin1, OUTPUT);
  pinMode(latchPin2, OUTPUT);
  pinMode(latchPin3, OUTPUT);
  pinMode(latchPin4, OUTPUT);
  pinMode(latchPin5, OUTPUT);
  pinMode(latchPin6, OUTPUT);
  Serial.begin(9600);
  Serial.println("RED's turn, Please start the game:");
}
int po[8] = {1,2,4,8,16,32,64,128};
int strtoint(String st)
{
  int num=0;
  for(int i=0;i<st.length();i++)
  {
   num+=(st[i]-'0')*po[7-i];
  }
  return num;
}
void bunc()
{
  row=NO_KEY;
  while(!row)
  {
    row = keyp.getKey();
  }
  if(row=='*')
  {
     bunc();
  }
  col=NO_KEY;
  while(!col)
  {
    col = keyp.getKey();
  }
  if(col=='*')
  {
    bunc();
  }
  if(row>'0'&&col>'0'&&row<'4'&&col<'4'&&(colr[row-'1'][col-'1']==color||colr[row-'1'][col-'1']==0))
  {
    
  }
  else
  {
    bunc();
  }
}

void func(int i, int j, int colt)
{
  if(i>=ROWS-1||i<0)
  {
    return;
  }
  if(j>=COLS||j<0)
   {
    return;
   }
  if(val[i][j]<lim[i][j])
  {
    val[i][j]++;
    colr[i][j]=colt;
  }
  else
  {
    val[i][j]=0;
    colr[i][j]=0;
    func(i,j-1,colt);
    func(i-1,j,colt);
    func(i+1,j,colt);
    func(i,j+1,colt);
   } 
}

void upd(String s,int color)
{
   Serial.print(s);
  Serial.print(" ");
  Serial.println(color);
  while(s.length()<16)
  {
    s+='1';
  }
  int num1=0;
  String s1,s2;
  s1=s.substring(0,8);
  s2=s.substring(8,16);
  Serial.println("fjhkjdhkjfkf   ");
  byte led1= strtoint(s1);
  byte led2= strtoint(s2);
  Serial.println(led1);
  Serial.println(led2);
  if(color==1)
  {
//    Serial.println("chala ");
    digitalWrite(latchPin1,LOW);
    shiftOut(dataPin1, clockPin1, LSBFIRST, led1);
    digitalWrite(latchPin1,HIGH);

    digitalWrite(latchPin2,LOW);
   shiftOut(dataPin2, clockPin2, LSBFIRST, led2);
   digitalWrite(latchPin2,HIGH);
  }
  else if(color==2)
  { 
    digitalWrite(latchPin3,LOW);
    shiftOut(dataPin3, clockPin3, LSBFIRST, led1);
    digitalWrite(latchPin3,HIGH);

    digitalWrite(latchPin4,LOW);
   shiftOut(dataPin4, clockPin4, LSBFIRST, led2);
   digitalWrite(latchPin4,HIGH);
  }
  else if(color==3)
  {
    digitalWrite(latchPin5,LOW);
    shiftOut(dataPin5, clockPin5, LSBFIRST, led1);
    digitalWrite(latchPin5,HIGH);

    digitalWrite(latchPin6,LOW);
   shiftOut(dataPin6, clockPin6, LSBFIRST, led2);
   digitalWrite(latchPin6,HIGH);
  }
}

void update_hardware()
{
  for( int kk=1;kk<=3;kk++)
  {
    String s="";
    for(int i=0;i<3;i++)
    {
      for(int j=0;j<3;j++)
      {
        int xx=val[i][j];
        for(int k=0;k<lim[i][j];k++)
        {
          if(xx>0&&colr[i][j]==kk)
          {
             s+='0';
             xx--;
          }
          else
          {
             s+='1';
          }
        }
      }
     }
     upd(s,kk);
  }
}

void dunc()
{
  Serial.println("This is current state: \n");
  for(int i=0;i<ROWS-1;i++)
  {
    for(int j=0;j<COLS;j++)
    {
      Serial.print(val[i][j]);
      Serial.print(",");
      if(colr[i][j]==0)
      {
        Serial.print("  ");
      }
      if(colr[i][j]==1)
      {
        Serial.print("R ");
      }
      if(colr[i][j]==2)
      {
        Serial.print("B ");
      }
      if(colr[i][j]==3)
      {
        Serial.print("G ");
      }
    }
    Serial.println();
  }
}

bool check()
{
  int pat[4]={0,0,0,0};
  
  for(int i=0;i<3;i++)
  {
    for(int j=0;j<3;j++)
    {
      pat[colr[i][j]]++;
    }
  }
  int coun=0;
  int ind=0;
  for(int i=1;i<4;i++)
  {
    if(pat[i]>0)
    {
      ind=i;
      coun++;
    }
  }
  if(coun==1)
  {
    if(ind==1)
    {
      Serial.println("Winner is RED/1");
    }
    else if(ind==2)
    {
      Serial.println("Winner is GREEN/2");
    }
    else if(ind==3)
    {
      Serial.println("Winner is BLUE/3");
    }
    return true;
  }
  else
  {
    return false;
  }
}
void loop()
{
  var++;
  color++;
  if(color>=4)
  {
    color=1;
  }
  bunc();                           // take inputs
  if(row!=NO_KEY&&col!=NO_KEY) 
  {
    func(row-'1',col-'1',color);    //makes changes as according to the inputs
  }
  update_hardware();
    
  dunc();                           // print current state
  if(firsttime==false)
  {
    if(check())
    {
      Serial.println("Game is Finished");
      delay(50000);
      
    }
  }
  else
  {
    firsttime=false;
  }
}
